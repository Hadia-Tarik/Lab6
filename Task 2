import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Names List'),
          actions: [
            DeleteButton(),
          ],
        ),
        body: NamesListView(),
      ),
    );
  }
}

class NamesListView extends StatefulWidget {
  static GlobalKey<_NamesListViewState> listViewKey =
      GlobalKey<_NamesListViewState>();

  @override
  _NamesListViewState createState() => _NamesListViewState();
}

class _NamesListViewState extends State<NamesListView> {
  final List<String> names = [
    'Alice',
    'Bob',
    'Charlie',
    'David',
    'Eva',
    'Frank',
    'Grace',
    'Hank',
    'Ivy',
    'Jack',
    'Kelly',
    'Leo',
  ];

  final Set<int> selectedItems = Set<int>();

  @override
  Widget build(BuildContext context) {
    return ListView.builder(
      key: NamesListView.listViewKey,
      itemCount: names.length,
      itemBuilder: (context, index) {
        bool isSelected = selectedItems.contains(index);

        return ListTile(
          title: Text(names[index]),
          trailing: isSelected ? Icon(Icons.check) : null,
          onTap: () {
            setState(() {
              if (isSelected) {
                selectedItems.remove(index);
              } else {
                selectedItems.add(index);
              }
            });
          },
        );
      },
    );
  }

  List<String> getSelectedNames() {
    return selectedItems.map((index) => names[index]).toList();
  }
}

class DeleteButton extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return IconButton(
      icon: Icon(Icons.delete),
      onPressed: () {
        final _NamesListViewState? namesListViewState =
            NamesListView.listViewKey.currentState;

        if (namesListViewState != null &&
            namesListViewState.selectedItems.isEmpty) {
          // Show SnackBar if no item is selected
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('No Item Selected'),
            ),
          );
        } else {
          // Show confirmation dialog if items are selected
          _showConfirmationDialog(context);
        }
      },
    );
  }

  void _showConfirmationDialog(BuildContext context) async {
    bool confirm = await showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Confirmation'),
          content: Text('Do you want to delete the selected items?'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(true); // Return true on "Yes"
              },
              child: Text('Yes'),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(false); // Return false on "No"
              },
              child: Text('No'),
            ),
          ],
        );
      },
    );

    if (confirm == true) {
      // Remove the selected items from the list
      final _NamesListViewState? namesListViewState =
          NamesListView.listViewKey.currentState;
      if (namesListViewState != null) {
        List<int> selectedItems = namesListViewState.selectedItems.toList();
        selectedItems.sort((a, b) => b.compareTo(a)); // Sort in reverse order
        for (int index in selectedItems) {
          namesListViewState.names.removeAt(index);
        }

        // Clear the selected items set
        namesListViewState.selectedItems.clear();
      }

      // Dismiss the dialog
      Navigator.of(context).pop();
    }
  }
}
